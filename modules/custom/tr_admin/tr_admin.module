<?php

/**
 * Call to URL (GET)
 */
function tr_admin_curl_call($url){
  $ch = curl_init();
  // set url
  curl_setopt($ch, CURLOPT_URL, $url);
  //return the transfer as a string
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  // $output contains the output string
  $output = curl_exec($ch);
  // close curl resource to free up system resources
  curl_close($ch);

  return json_decode($output);
}

/**
 * Create price
 */
function tr_admin_create_price($data){

  global $user;
  $node = new stdClass();
  $node->type = 'price';
  $node->title = $data->LastPrice;
  node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
  $node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
  $node->uid = $user->uid;

  if(!empty($data->DayHighestPrice)) $node->field_day_highest_price['und'][0]['value'] = $data->DayHighestPrice;
  if(!empty($data->DayLowestPrice)) $node->field_day_lowest_price['und'][0]['value'] = $data->DayLowestPrice;
  if(!empty($data->DayAvgPrice)) $node->field_day_avg_price['und'][0]['value'] = $data->DayAvgPrice;
  if(!empty($data->DayVolumeXbt)) $node->field_day_volume_xbt['und'][0]['value'] = $data->DayVolumeXbt;
  if(!empty($data->LastPrice)) $node->field_last_price['und'][0]['value'] = $data->LastPrice;
  if(!empty($data->PrimaryCurrencyCode)) $node->field_primary_currency_code['und'][0]['value'] = $data->PrimaryCurrencyCode;
  if(!empty($data->SecondaryCurrencyCode)) $node->field_secondary_currency_code['und'][0]['value'] = $data->SecondaryCurrencyCode;
  if(!empty($data->CreatedTimestampUtc)){
    $time_UTC = str_replace("T"," ",$data->CreatedTimestampUtc);
    $time_UTC = substr($time_UTC, 0, strpos($time_UTC, "."));
    $node->field_date_and_time['und'][0]['value'] = $time_UTC;
  }
  // if(!empty($data->xxxx)) $node->field_status['und'][0]['value'] = $data->xxxx;
  // if(!empty($data->xxxx)) $node->field_status['und'][0]['value'] = $data->xxxx;
  // if(!empty($data->xxxx)) $node->field_status['und'][0]['value'] = $data->xxxx;



  $node = node_submit($node); // Prepare node for saving
  node_save($node);
  return $node;


}


// /**
//  * Call to URL (GET)
//  */
// function tr_admin_curl_call($url){
//   // $url = "https://api.independentreserve.com/Public/GetMarketSummary?primaryCurrencyCode=xbt&secondaryCurrencyCode=aud";
// }


/*
HOW TO CONFIGURE CRON TO RUN EVERY MINUTE

MAMP:
https://www.drupal.org/docs/7/setting-up-cron-for-drupal/configuring-cron-jobs-with-mamp-localhost

1 - In Terminal type "crontab -e". This allows you to add a cron job, using the vim editor.
2 - Press i on your keyboard to go into vim's insert mode.
3 - Type in you cron command. For example, to run at EVERY minute of every hour using curl, use:
    "* * * * * /usr/bin/curl --silent --compressed http://localhost:8888/trade/web/trade-drupal/cron.php?cron_key=XYZ"
    Note 1: that if you are not using MAMP's default 8888 port, you should leave that off.
    Note 2: you can find the cron key "XYZ" here: /admin/config/system/cron/settings
4 - Press escape key to exit vim's insert mode.
5 - Type ZZ (Must be capital letters -- saves the file and exits crontab).
6 - Verify the cron job details by typing crontab -l (that's a lower case L) at the terminal prompt.

OTHER: (CPANEL)
https://www.drupal.org/docs/7/setting-up-cron-for-drupal/configuring-cron-jobs-with-cpanel
*/


/**
 * Implements hook_cron().
 */
function tr_admin_cron() {
    $time = time();
    $url = "https://api.independentreserve.com/Public/GetMarketSummary?primaryCurrencyCode=xbt&secondaryCurrencyCode=aud";
    $queue_item_params = $url;
    $queue = DrupalQueue::get('trade_cron_test');
    $queue->createItem($queue_item_params);
    watchdog(
    'Trade Cron',
    "Cron Time 1 !time</pre>",
    array(
      '!time' =>  print_r($time, TRUE),
      ),
    WATCHDOG_NOTICE
    );

}

/**
 * Implements hook_cron_queue_info().
 */
function tr_admin_cron_queue_info() {
  $queues['trade_cron_test'] = array(
    'worker callback' => '_cron_test',
    'time' => 60,
  );
  return $queues;
}


function _cron_test($queue_item_params) {
    $url = $queue_item_params;
    $data = tr_admin_curl_call($url);
    $new_price = tr_admin_create_price($data);
    watchdog(
    'Trade Cron',
    "Price created !price</pre>",
    array(
      '!price' =>  print_r($new_price, TRUE),
      ),
    WATCHDOG_NOTICE
    );
}


// /**
//  * Implements hook_cron().
//  */
// function vimn_twitter_voting_rules_cron() {

//   // find all chats with auto import tweets activated
//   $query = new EntityFieldQuery();
//   $query->entityCondition('entity_type', 'node')
//         ->entityCondition('bundle', 'vimn_ct_chat')
//         ->fieldCondition('vimn_f_chat_auto_import', 'value', 1, '=')
//         ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT');
//   $result_query = $query->execute();

//   if (!empty($result_query['node'])) {
//     $chat_ids = (array_keys($result_query['node']));
//     // add job to the cron queue
//     foreach ($chat_ids as $chat_id) {
//       $queue_item_params = array(
//         'chat_id' => $chat_id,
//         'retry' => true,
//         );
//       $queue = DrupalQueue::get('vimn_import_tweets');
//       $queue->createItem($queue_item_params);
//     }
//     watchdog(
//     'VIMN Twitter Voting Cron',
//     "Cron Import Tweets worker called: <pre>Chat ID's = !ids</pre>",
//     array(
//       '!ids' =>  print_r($chat_ids, TRUE),
//       ),
//     WATCHDOG_NOTICE
//     );

//   }
// }


// /**
//  * Implements hook_cron_queue_info().
//  */
// function vimn_twitter_voting_rules_cron_queue_info() {
//   $queues['vimn_import_tweets'] = array(
//     'worker callback' => '_cron_import_tweets',
//     'time' => 60,
//   );
//   return $queues;
// }


// function _cron_import_tweets($queue_item_params) {
//   $chat_id = $queue_item_params['chat_id'];
//   $retry = $queue_item_params['retry'];

//   $chat = node_load($chat_id);
//   // check that the chat has the auto import tweets field activated
//   if ($chat->vimn_f_chat_auto_import['und'][0]['value'] == 1){
//     // import tweets
//     module_load_include('inc', 'vimn_twitter_voting_rules', 'vimn_twitter_voting_rules.rules');
//     $result_import = _import_new_tweets($chat_id);
//     switch ($result_import) {
//       case 'ok':
//         // update the Stream view - TO DO
//         //vimn_twitter_voting_chat_push_new_tweets($chat_id);
//         break;
//       case 'error_retry':
//         // call again the job worker, but with no more retry oportunities
//         if ($retry){
//           $queue_item_params = array(
//             'chat_id' => $chat_id,
//             'retry' => false,
//             );
//           $queue = DrupalQueue::get('vimn_import_tweets');
//           $queue->createItem($queue_item_params);
//         }
//         break;
//       case 'no_new_tweets':
//       case 'error':
//       default:
//         break;
//     }

//     watchdog(
//       'VIMN Twitter Voting Cron',
//       "Tweets imported. <pre>Chat ID = !ids</pre><pre>time = !time</pre>",
//       array(
//         '!time' =>  print_r(strtotime("now"), TRUE),
//         '!ids' =>  print_r($chat_id, TRUE),
//         ),
//       WATCHDOG_NOTICE
//       );
//   }
// }




// // **********************************************************************
// //     Import issues
// // **********************************************************************

// /**
//  * Implements hook_menu().
//  */
// function trade_menu() {

//   // 1 - Patients
//   $items['import_issues'] = array(
//     'title' => t('Import Issues'),
//     'description' => t('Import JIRA issues'),
//     'access arguments' => array('access content'),
//     'menu_name' => 'main-menu',
//     'page callback' => 'drupal_get_form',
//     'page arguments' => array('trade_import_issues_form'),
//     'type' => MENU_NORMAL_ITEM,
//     'weight' => 2,
//   );
//   // $items['secretariat/patients/import'] = array(
//   //   'title' => t('Import'),
//   //   'description' => t('Import or update Patients using an Excel file'),
//   //   'weight' => 1,
//   //   'type' => MENU_DEFAULT_LOCAL_TASK,
//   // );
//   // $items['secretariat/patients/create'] = array(
//   //   'title' => t('Create'),
//   //   'description' => t('Create a Patient'),
//   //   'page callback' => 'drupal_get_form',
//   //   'page arguments' => array('trade_create_patients_form'),
//   //   'access arguments' => array('access secretariat actions'),
//   //   'weight' => 2,
//   //   'type' => MENU_LOCAL_TASK,
//   // );


//   return $items;
// }


// /**
// * Page callback for Import Patients Form
// */
// function trade_import_issues_form($form, &$form_state) {

//   $form['info'] = array(
//     '#type' => 'markup',
//     '#markup' => '<p>' . t('Import JIRA issues') . '</p>',
//   );
//   $form['jira_filter_id'] = array(
//     '#type' => 'textfield',
//     '#title' => t('JIRA filter ID'),
//     '#required' => true,
//     '#default_value' => '73509',
//   );

//   $form['submit'] = array(
//     '#type' => 'submit',
//     '#value' => t('Import'),
//   );

//   return $form;
// }

// function trade_curl_call($filter_id, $startAt) {
//   // general URL configuration
//   $username = 'xxxyyy';
//   $password = 'xxxx';
//   $maxResults = 1;
//   $fields = 'status,customfield_14402,customfield_13781,lastViewed,customfield_17300,customfield_27304,timespent,customfield_16000,customfield_13551,customfield_15004,summary,issuetype,components,worklog';

//   // curl call
//   ini_set("allow_url_fopen", 1);
//   $ch = curl_init();
//   curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
//   curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
//   curl_setopt($ch, CURLOPT_USERPWD, $username . ':' . $password);
//   curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
//   curl_setopt($ch, CURLOPT_URL, 'https://xxxxxx?jql=filter=' . $filter_id . '&maxResults=' . $maxResults . '&startAt=' . $startAt . '&fields=' . $fields);
//   $result = curl_exec($ch);
//   curl_close($ch);

//  return json_decode($result);

// }

// function trade_import_issues_form_submit($form, &$form_state) {

//   // initial call to check total number of issues
//   $filter_id = $form_state['input']['jira_filter_id'];
//   $startAt = 0;
//   $obj = trade_curl_call($filter_id, $startAt);

//   if (isset($obj->errorMessages[0])){
//     drupal_set_message('ERROR: ' . $obj->errorMessages[0], 'error');
//   }
//   else {
//     $total_num_issues = $obj->total;
//     $data = array(
//       'total_num_issues'=> $total_num_issues,
//       'filter_id' => $filter_id,
//       'startAt' => $startAt,
//       );

//     $operations[] = array(
//       'trade_fetching_issues',  // The function to run on each issue
//       array($data),  // issue data
//     );

//     // Once everything is gathered and ready to be processed... well... process it!
//     $batch = array(
//       'title' => t('Fetching ') . $total_num_issues . t(' issues to JIRA API ...') ,
//       'operations' => $operations,  // Runs all of the queued processes from the while loop above.
//       //'finished' => 'trade_import_finished', // Function to run when the import is successful
//       'error_message' => t('The installation has encountered an error.'),
//       'progress_message' => t('Imported @current of @total products.'),
//     );
//     batch_set($batch);

//   }


// }

// /**
//  * This function runs the batch processing and fetches the issues to the JIRA API
//  */
// function trade_fetching_issues($data) {

//   $total_num_issues = $data['total_num_issues'];
//   $filter_id = $data['filter_id'];
//   $startAt = $data['startAt'];

//   while($startAt<$total_num_issues){
//     $issue = trade_curl_call($filter_id, $startAt);
//     $data_issue = $issue->issues[0];
//     $operations[] = array(
//       'pm_issue_import_batch_processing',  // The function to run on each issue
//       array($data_issue),  // issue data
//     );
//     $startAt++;
//   }

//   // Once everything is gathered and ready to be processed... well... process it!
//   $batch = array(
//     'title' => t('Importing issues...'),
//     'operations' => $operations,  // Runs all of the queued processes from the while loop above.
//     'finished' => 'trade_import_finished', // Function to run when the import is successful
//     'error_message' => t('The installation has encountered an error.'),
//     'progress_message' => t('Imported @current of @total products.'),
//   );
//   batch_set($batch);

// }

// /**
//  * This function runs the batch processing and creates nodes with then given information
//  */
// function pm_issue_import_batch_processing($data) {


//   $jira_id = $data->key;


//   // Create or update JIRA Issue
//   $query = new EntityFieldQuery();
//   $query->entityCondition('entity_type', 'node')
//     ->entityCondition('bundle', 'issue')
//     ->propertyCondition('title', $jira_id)
//     ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT');
//   $result = $query->execute();

//   // update
//   if (!empty($result['node'])) {
//     $action = "update";
//     $key = array_keys($result['node']);
//     $nid = reset($key);
//     $node = node_load($nid);
//   }
//   // create
//   else{
//     $action = "create";
//     global $user;
//     $node = new stdClass();
//     $node->type = 'issue';
//     $node->title = $jira_id;
//     node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
//     $node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
//     $node->uid = $user->uid;
//     $node->field_internal_requests['und'][0]['value'] = 1;
//   }

//   $node->title = $jira_id;
//   if(!empty($data->fields->status->name)) $node->field_status['und'][0]['value'] = $data->fields->status->name;
//   if(!empty($data->fields->customfield_14402->value)) $node->field_brand['und'][0]['value'] = $data->fields->customfield_14402->value;
//   if(!empty($data->fields->customfield_13781->value)){
//     $business_channel = $data->fields->customfield_13781->value;
//     $node->field_business_channel['und'][0]['value'] = $business_channel;
//     $node->field_business_channel_ln30['und'][0]['value'] = create_business_channel_ln30($business_channel);
//   }
//   if(!empty($data->fields->customfield_27304->name)) $node->field_design_owner['und'][0]['value'] = $data->fields->customfield_27304->name;
//   if(empty($data->fields->timespent)){
//     // Not Log time if not needed
//     $log_time = "no";
//   }
//   else{
//     if ($action == "update" && isset ($node->field_time_spent['und'][0]['value']) && $data->fields->timespent/3600 > $node->field_time_spent['und'][0]['value']){
//         $log_time = "no";
//     }
//     else {
//       $log_time = "yes";
//       // update timespent field value
//       $node->field_time_spent['und'][0]['value'] = $data->fields->timespent/3600;
//     }

//   }
//   if(!empty($data->fields->customfield_16000->value)) $node->field_region['und'][0]['value'] = $data->fields->customfield_16000->value;
//   if(!empty($data->fields->customfield_13551->value)) $node->field_production_area['und'][0]['value'] = $data->fields->customfield_13551->value;
//   if(!empty($data->fields->summary)) $node->field_summary['und'][0]['value'] = $data->fields->summary;
//   if(!empty($data->fields->issuetype->name)) $node->field_issue_type['und'][0]['value'] = $data->fields->issuetype->name;
//   if(!empty($data->fields->customfield_15004)){
//     $node->field_last_closed['und'][0]['value'] = substr($data->fields->customfield_15004, 0, -4);
//     $node->field_last_closed_year['und'][0]['value'] = substr($data->fields->customfield_15004, 0, 4);
//     $node->field_last_closed_month['und'][0]['value'] = substr($data->fields->customfield_15004, 5, 2);
//   }
//   if(!empty($data->fields->components)){
//     foreach ($data->fields->components as $key => $value) {
//       $component[]['value'] = $value->name;
//     }
//     $node->field_components['und'] = $component;
//   }
//   else {
//      $node->field_components = null;
//   }


//   $node = node_submit($node); // Prepare node for saving
//   node_save($node);

//   // Log time if needed
//   if ($log_time == "yes") trade_log_time($jira_id, $data->fields->worklog);
// }


// /**
//  * This function runs when the batch processing is complete
//  */
// function trade_import_finished() {
//   drupal_set_message(t('Import Completed Successfully'));
// }




// /**
//  * Create values for Business Channel LN30
//  */
// function create_business_channel_ln30($business_channel) {
//   switch ($business_channel) {
//     case 'Marketing':
//       $new_value = '01. Brand';
//       break;
//     case 'GRO':
//       $new_value = '02. GRO';
//       break;
//     case 'Merchandising':
//       $new_value = '02. GRO';
//       break;
//     case 'EDM':
//       $new_value = '03. EDM';
//       break;
//     case 'Programmatic':
//       $new_value = '04. Programmatic';
//       break;
//     case 'DMO':
//       $new_value = '05. DMO';
//       break;
//     case 'MESO':
//       $new_value = '06. MESO';
//       break;
//     case 'DPS':
//       $new_value = '07. DPS';
//       break;
//     case 'Legal':
//       $new_value = '08. Legal';
//       break;
//     case 'SEO':
//       $new_value = '09. SEO';
//       break;
//     case 'SEM':
//       $new_value = '10. SEM';
//       break;
//     case 'LX':
//       $new_value = '11. LX';
//       break;
//     case 'Customer Experience':
//       $new_value = '12. CX';
//       break;
//     case 'GCO':
//       $new_value = '13. GCO';
//       break;
//     case 'LPS':
//       $new_value = '14. LPS';
//       break;
//     case 'TAAP':
//       $new_value = '15. TAAP';
//       break;
//     case 'Transport':
//       $new_value = '16. Transport';
//       break;
//     case 'Production':
//       $new_value = '20. Production';
//       break;
//     default:
//       $new_value = $business_channel;
//       break;
//   }

//   return $new_value;
// }

// /**
//  * This function creates JIRA Time Log nodes for the specified Jira Ticket Id
//  */
// function trade_log_time($jira_ticket_id, $worklog_data) {

//   if ($worklog_data->total > 0){
//     // Check if JIRA Ticket exist and its node_id
//     $query = new EntityFieldQuery();
//     $query->entityCondition('entity_type', 'node')
//       ->entityCondition('bundle', 'issue')
//       ->propertyCondition('title', $jira_ticket_id)
//       ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT');
//     $result = $query->execute();

//     // exist
//     if (!empty($result['node'])) {
//       $key = array_keys($result['node']);
//       $jira_ticket_nid = reset($key);
//       $worklog_element = 0;
//       while ($worklog_element < $worklog_data->total) {

//         // Check if JIRA User exist and its node_id
//         $jira_user_id = $worklog_data->worklogs[$worklog_element]->author->name;
//         $query2 = new EntityFieldQuery();
//         $query2->entityCondition('entity_type', 'node')
//           ->entityCondition('bundle', 'jira_user')
//           ->propertyCondition('title', $jira_user_id)
//           ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT');
//         $result2 = $query2->execute();

//         // exist
//         if (!empty($result2['node'])) {
//           $key = array_keys($result2['node']);
//           $jira_user_nid = reset($key);

//           // Check if JIRA Log Time exist and its node_id
//           $jira_time_log_id = $worklog_data->worklogs[$worklog_element]->id;
//           $query3 = new EntityFieldQuery();
//           $query3->entityCondition('entity_type', 'node')
//             ->entityCondition('bundle', 'jira_time_log')
//             ->propertyCondition('title', $jira_time_log_id)
//             ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT');
//           $result3 = $query3->execute();

//           // exist => update
//           if (!empty($result3['node'])) {
//             $key = array_keys($result3['node']);
//             $jira_time_log_nid = reset($key);
//             $node = node_load($jira_time_log_nid);

//           }
//           // doesn't exist => create
//           else{
//             global $user;
//             $node = new stdClass();
//             $node->type = 'jira_time_log';
//             $node->title = $jira_time_log_id;
//             node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
//             $node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
//             $node->uid = $user->uid;
//           }

//           $node->title = $jira_time_log_id;
//           if(!empty($worklog_data->worklogs[$worklog_element]->timeSpentSeconds)) $node->field_time_logged['und'][0]['value'] = $worklog_data->worklogs[$worklog_element]->timeSpentSeconds/3600;
//           $node->field_jira_ticket['und'][0]['target_id'] = $jira_ticket_nid;
//           $node->field_jira_user['und'][0]['target_id'] = $jira_user_nid;
//           if(!empty($worklog_data->worklogs[$worklog_element]->created)){
//             $node->field_date_logged['und'][0]['value'] = substr($worklog_data->worklogs[$worklog_element]->created, 0, -4);
//             $node->field_date_logged_year['und'][0]['value'] = substr($worklog_data->worklogs[$worklog_element]->created, 0, 4);
//             $node->field_date_logged_month['und'][0]['value'] = substr($worklog_data->worklogs[$worklog_element]->created, 5, 2);
//           }

//           $node = node_submit($node); // Prepare node for saving
//           node_save($node);

//         }
//         // doesn't exist
//         else{
//           //dpm("JIRA USER not found: ");
//           //dpm($jira_user_id);
//           watchdog('trade', "Log time: JIRA USER not found. Ticket ID: " . $jira_ticket_id . " User: " . $jira_user_id . " Log ID: " . $worklog_data->worklogs[$worklog_element]->id, array(), WATCHDOG_ERROR);
//           // dpm("Worklog:");
//           // dpm($worklog_data->worklogs[$worklog_element]);
//           // dpm($worklog_data);
//           // dpm("Worklog_element :");
//           // dpm($worklog_element);
//           // dpm("JIRA Ticket: ");
//           // $jira_ticket_url = 'https://jira.sea.corp.expecn.com/jira/browse/' . $jira_ticket_id;
//           // $jira_ticket_feed = 'https://jira.sea.corp.expecn.com/jira/rest/api/2/issue/' . $jira_ticket_id . '/worklog';
//           // dpm($jira_ticket_url);
//           // dpm($jira_ticket_feed);
//         }

//         $worklog_element++;
//       }

//     }
//     // doesn't exist
//     else{
//       dpm("JIRA Ticket not found: ");
//       dpm($jira_ticket_id);
//       dpm($worklog_data);
//     }
//   }
// }

